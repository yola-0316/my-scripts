#! /usr/bin/env python

from argparse import ArgumentParser
from os import scandir
from os.path import abspath, basename, isdir
from typing import ParamSpec


parser = ArgumentParser(
    prog='Tree',
    description='Print tree structure of path specified.',
    epilog='Written by HZ.Impact Studio.')

parser.add_argument('DIR', default='.', nargs='?')
parser.add_argument('-L', '--level', type=int, default=0)
parser.add_argument('-f', '--limit', type=str, help='number or coma separated list of numbers', default='100')
parser.add_argument('--version', action='version', version='%(prog)s 0.1.0')


P = ParamSpec('P')

def tree(entrydir: any, padding: str, is_last: bool = True, *args: P.args, **kwargs: P.kwargs):
    if not isdir(entrydir.path):
        return show_file(padding, entrydir, is_last)
    show_dir(padding, entrydir, is_last)

    padding += '  ' if is_last else '│ '

    level, limit = kwargs.get('level'), kwargs.get('limit')
    depth = kwargs.get('depth', 0)
    if level != 0 and depth >= level + 1:
        return

    limits = limit if isinstance(limit, list) else limit.split(',')

    limit = int(limits[depth] if depth < len(limits) else limits[-1])
    files = [f for f in scandir(entrydir.path) if not f.name.startswith('.')]
    for i, file in enumerate(sort_files(files)):
        if limit == 0:
            print(padding + '└─' + '... <additional files>')
            break
        depth += 1
        tree(file, padding, i == len(files) - 1, **{'depth': depth, 'limit': limits, **kwargs})
        limit -= 1
        depth -= 1


def show_dir(padding: str, file: str, is_last: bool = True):
    padding += '└─' if is_last else '├─'
    print(padding + '\033[34m' + file.name + '/' + '\033[0m')


def show_file(padding: str, file: str, is_last: bool = True):
    padding += '└─' if is_last else '├─'
    print(padding + '\033[92m' + file.name + '\033[0m')


def sort_files(files: list):
    dirs = [d for d in files if d.is_dir()]
    files = [f for f in files if not f.is_dir()]
    dirs = sorted(dirs, key=lambda x: x.name)
    files = sorted(files, key=lambda x: x.name)
    return dirs + files


def main():
    args = parser.parse_args()

    class Entry:
        name = ''
        path = ''

    entry = Entry
    entry.name = basename(args.DIR)
    entry.path = abspath(args.DIR)
    tree(entry, '', **vars(args))


if __name__ == '__main__':
    main()


# for semantic box drawing
# box_light_horizontal = 9472
